type Task {
  id: ID!
  prettyId: String!
  title: String!
  owner: User
  size: Float
  description: String
  column: Column!
  columnOrderNumber: Int!
  swimlaneOrderNumber: Int
  subtasks: [Subtask!]!
  subtaskOrder: [ID!]!
  deletedAt: String
  members: [User!]!
  board: Board
}

type Query {
  taskById(id: ID!): Task!
}

type Mutation {
  addTaskForColumn(boardId: ID!, columnId: ID!, title: String!, size: Float, ownerId: ID, memberIds: [ID!], description: String): Task
  editTaskById(id: ID!, title: String!, size: Float, ownerId: ID, oldMemberIds: [ID!], newMemberIds: [ID!], description: String): Task
  deleteTaskById(id: ID!): ID
  archiveTaskById(id: ID!): ID
  restoreTaskById(id: ID!): Task
  addMemberForTask(id: ID!, userId: ID!): Task
}

type Subscription {
  taskMutated(boardId: ID!): TaskMutationPayload!
}

type TaskMutationPayload {
  mutationType: MutationType!
  node: Task!
}

enum MutationType{
  CREATED
  UPDATED
  DELETED
}


