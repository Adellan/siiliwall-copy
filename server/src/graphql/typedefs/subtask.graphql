input TicketOrderInput {
  ticketId: ID!
  type: String
}

type Subtask {
  id: ID!
  prettyId: String!
  name: String
  content: String!
  size: Float
  owner: User
  members: [User!]
  done: Boolean!
  task: Task
  orderNumber: Int!
  deletedAt: String
  column: Column
  board: Board
}

type Mutation {
  addSubtaskForTask(taskId: ID!, columnId: ID!, boardId: ID!, name: String, content: String!, size: Float, ownerId: ID, memberIds: [ID!], ticketOrder: [TicketOrderInput!]): Subtask
  editSubtaskById(id: ID!, name: String, content: String!, size: Float, ownerId: ID, oldMemberIds: [ID!], newMemberIds: [ID!]): Subtask
  addMemberForSubtask(id: ID!, userId: ID!): Task
  deleteSubtaskById(id: ID!): ID
  archiveSubtaskById(id: ID!): ID
}

type Subscription {
  subtaskMutated(boardId: ID!): SubtaskMutationPayload!
}

type SubtaskMutationPayload {
  mutationType: MutationType!
  subtask: Subtask!
}

enum MutationType{
  CREATED
  UPDATED
}


