enum AllowedTicketType {
  task
  subtask
}

input TicketOrderInput {
  ticketId: ID!
  type: String
}

type TicketOrderObject {
  ticketId: ID!
  type: AllowedTicketType
}

input snackbarInfoInput {
  columnName: String!
  prettyId: String!
  ticketType: String!
}

type snackbarInfoObject{
  columnName: String!
  prettyId: String!
  ticketType: AllowedTicketType
}

type Column {
  id: ID!
  name: String!
  board: Board!
  orderNumber: Int!
  stories: [Story!]!
  tasks: [Task!]!
  subtasks: [Subtask!]!
  ticketOrder: [TicketOrderObject!]!
}

type Query {
  columnById(id: ID!): Column!
}

type Mutation {
  addColumnForBoard(boardId: ID!, name: String!, eventId: ID!): Column
  editColumnById(id: ID!, name: String!, oldName: String!, boardId: ID!, eventId: ID!): Column
  deleteColumnById(id: ID!, boardId: ID!, eventId: ID!, name: String!): ID
  moveTicketInColumn(
    newOrder: [TicketOrderInput!]!
    columnId: ID!
    snackbarInfo: snackbarInfoInput!
    boardId: ID!
    eventId: ID!
  ): Column
  moveTicketFromColumn(
    type: String!
    ticketId: ID!
    sourceColumnId: ID!
    destColumnId: ID!
    sourceTicketOrder: [TicketOrderInput!]!
    destTicketOrder: [TicketOrderInput!]!
    snackbarInfo: snackbarInfoInput!
    eventId: ID!
  ): [Column!]
  moveColumn(boardId: ID!, newColumnOrder: [ID!]!): ID!
}

type Subscription {
  ticketMovedInColumn(boardId: ID!, eventId: ID!): TicketMovedInColumnPayload!
  ticketMovedFromColumn(
    boardId: ID!
    eventId: ID!
  ): TicketMovedFromColumnPayload!
  columnDeleted(boardId: ID!, eventId: ID!): ColumnRemovePayload!
  columnEdited(boardId: ID!, eventId: ID!): ColumnEditedPayload!
  columnCreated(boardId: ID!, eventId: ID!): ColumnCreatedPayload!
}

type ColumnEditedPayload {
  column: Column!
  oldName: String!
}

type ColumnCreatedPayload {
  column: Column!
}

type ColumnRemovePayload {
  removeType: RemoveType!
  removeInfo: RemoveInfo!
}

type RemoveInfo {
  columnId: ID!
  boardId: ID!
  name: String!
}

enum RemoveType {
  DELETED
  ARCHIVED
}

type TicketMovedInColumnPayload {
  newOrder: [TicketOrderObject!]!
  columnId: ID!
  snackbarInfo: snackbarInfoObject!
}

type TicketMovedFromColumnPayload {
  ticketInfo: TicketOrderObject!
  snackbarInfo: snackbarInfoObject!
  sourceColumnId: ID!
  destColumnId: ID!
  sourceTicketOrder: [TicketOrderObject!]!
  destTicketOrder: [TicketOrderObject!]!
}
