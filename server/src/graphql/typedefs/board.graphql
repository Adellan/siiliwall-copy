type Board {
  id: ID!
  prettyId: String!
  name: String!
  orderNumber: Int!
  columns: [Column!]!
  columnOrder: [ID!]!
  swimlaneOrder: [ID!]!
  ticketCount: Int
  color: Int!
}

type Query {
  allBoards: [Board!]!
  boardById(id: ID!): Board!
}

input newSwimlaneOrderInput {
  id: ID!
  swimlaneOrderNumber: Int!
}

type SwimlaneOrderObject {
  id: ID!
  swimlaneOrderNumber: Int!
}

type Mutation {
  addBoard(
    name: String!
    prettyId: String!
    color: Int!
    eventId: ID!
    projectId: ID!
  ): Board!
  moveSwimlane(
    boardId: ID!
    affectedSwimlanes: [newSwimlaneOrderInput]!
    swimlaneOrder: [ID!]!
    eventId: ID!
  ): ID
}

type Subscription {
  swimlaneMoved(boardId: ID!, eventId: ID!): SwimlaneMovedPayload!
  boardAdded(projectId: ID!, eventId: ID!): BoardAddedPayload!
}

type SwimlaneMovedPayload {
  boardId: ID!
  affectedSwimlanes: [SwimlaneOrderObject]!
  swimlaneOrder: [ID]!
}

type BoardAddedPayload {
  mutationType: MutationType!
  board: Board!
}

enum MutationType {
  CREATED
}
