type Board {
  id: ID!
  prettyId: String!
  name: String!
  orderNumber: Int!
  columns: [Column!]!
  columnOrder: [ID!]!
  swimlaneOrder: [ID!]!
  ticketCount: Int
}

type Query {
  allBoards: [Board!]!
  boardById(id: ID!): Board!
}

input newSwimlaneOrderInput {
  id: ID!
  swimlaneOrderNumber: Int!
}

type SwimlaneOrderObject {
  id: ID!
  swimlaneOrderNumber: Int!
}

type Mutation {
  addBoard(name: String!, prettyId: String!, eventId: ID!): Board
  moveSwimlane(boardId: ID!, affectedSwimlanes: [newSwimlaneOrderInput]!, swimlaneOrder: [ID!]!, eventId: ID!): ID
}

type Subscription {
  boardAdded(eventId: ID!): boardAddedPayload!
}

type Subscription {
  swimlaneMoved(boardId: ID!, eventId: ID!): SwimlaneMovedPayload!
}

type SwimlaneMovedPayload {
  boardId: ID!
  affectedSwimlanes: [SwimlaneOrderObject]!
  swimlaneOrder: [ID]!
}

type boardAddedPayload {
  mutationType: MutationType!
  mutationInfo: MutationInfo!
}

type MutationInfo {
  eventId: ID!
  
}
enum MutationType {
  CREATED
}
